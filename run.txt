# Video Converter Script for Windows 10
# Searches for .mp4 and .mkv files and converts them to optimized MP4 format
# Requires FFmpeg to be installed and in PATH

param(
    [Parameter(Mandatory=$true)]
    [string]$SourceDirectory,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputDirectory = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$DeleteOriginal = $false,
    
    [Parameter(Mandatory=$false)]
    [string]$Quality = "23",  # CRF value (18-28 recommended, lower = better quality)
    
    [Parameter(Mandatory=$false)]
    [switch]$OverwriteExisting = $false
)

# Function to check if FFmpeg is available
function Test-FFmpeg {
    try {
        $null = Get-Command ffmpeg -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# Function to get human-readable file size
function Get-FileSize {
    param([long]$Bytes)
    
    $sizes = @("B", "KB", "MB", "GB", "TB")
    $index = 0
    $size = $Bytes
    
    while ($size -gt 1024 -and $index -lt ($sizes.Length - 1)) {
        $size = $size / 1024
        $index++
    }
    
    return "{0:N2} {1}" -f $size, $sizes[$index]
}

# Function to convert video file
function Convert-VideoFile {
    param(
        [string]$InputFile,
        [string]$OutputFile,
        [string]$CRF
    )
    
    Write-Host "Converting: $InputFile" -ForegroundColor Yellow
    Write-Host "Output: $OutputFile" -ForegroundColor Green
    
    $originalSize = (Get-Item $InputFile).Length
    Write-Host "Original size: $(Get-FileSize $originalSize)" -ForegroundColor Cyan
    
    # Escape file paths for FFmpeg (handle spaces and special characters)
    $escapedInputFile = "`"$InputFile`""
    $escapedOutputFile = "`"$OutputFile`""
    
    # FFmpeg command with optimized settings for small file size and good quality
    $ffmpegArgs = @(
        '-i', $escapedInputFile
        '-c:v', 'libx264'           # H.264 video codec
        '-crf', $CRF                # Constant Rate Factor (quality)
        '-preset', 'medium'         # Encoding speed vs compression efficiency
        '-c:a', 'aac'              # AAC audio codec
        '-b:a', '128k'             # Audio bitrate
        '-movflags', '+faststart'   # Web optimization
        '-y'                       # Overwrite output file
        $escapedOutputFile
    )
    
    try {
        # Validate input file exists and is accessible
        if (-not (Test-Path $InputFile)) {
            Write-Host "✗ Input file not found: $InputFile" -ForegroundColor Red
            return $false
        }
        
        # Check if input file is not locked/in use
        try {
            $fileStream = [System.IO.File]::Open($InputFile, 'Open', 'Read', 'ReadWrite')
            $fileStream.Close()
        }
        catch {
            Write-Host "✗ Input file is locked or in use: $InputFile" -ForegroundColor Red
            return $false
        }
        
        Write-Host "Running FFmpeg command..." -ForegroundColor Gray
        $process = Start-Process -FilePath "ffmpeg" -ArgumentList $ffmpegArgs -Wait -PassThru -NoNewWindow -RedirectStandardError "ffmpeg_error.log"
        
        if ($process.ExitCode -eq 0) {
            if (Test-Path $OutputFile) {
                $newSize = (Get-Item $OutputFile).Length
                $compressionRatio = [math]::Round((1 - ($newSize / $originalSize)) * 100, 2)
                
                Write-Host "✓ Conversion successful!" -ForegroundColor Green
                Write-Host "New size: $(Get-FileSize $newSize)" -ForegroundColor Cyan
                Write-Host "Size reduction: $compressionRatio%" -ForegroundColor Magenta
                Write-Host "---" -ForegroundColor Gray
                
                return $true
            }
            else {
                Write-Host "✗ Output file was not created successfully" -ForegroundColor Red
                return $false
            }
        }
        else {
            Write-Host "✗ Conversion failed with exit code: $($process.ExitCode)" -ForegroundColor Red
            if (Test-Path "ffmpeg_error.log") {
                $errorContent = Get-Content "ffmpeg_error.log" -Tail 5
                Write-Host "Last few lines of error log:" -ForegroundColor Yellow
                $errorContent | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
            }
            return $false
        }
    }
    catch {
        Write-Host "✗ Error during conversion: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Main script execution
Write-Host "Video Converter Script Starting..." -ForegroundColor Blue
Write-Host "=================================" -ForegroundColor Blue

# Validate FFmpeg installation
if (-not (Test-FFmpeg)) {
    Write-Host "ERROR: FFmpeg is not installed or not in PATH!" -ForegroundColor Red
    Write-Host "Please install FFmpeg from https://ffmpeg.org/download.html" -ForegroundColor Yellow
    Write-Host "And make sure it's added to your system PATH." -ForegroundColor Yellow
    exit 1
}

# Validate source directory
if (-not (Test-Path $SourceDirectory)) {
    Write-Host "ERROR: Source directory does not exist: $SourceDirectory" -ForegroundColor Red
    exit 1
}

# Set output directory if not specified
if ($OutputDirectory -eq "") {
    $OutputDirectory = Join-Path $SourceDirectory "converted"
}

# Create output directory if it doesn't exist
if (-not (Test-Path $OutputDirectory)) {
    New-Item -ItemType Directory -Path $OutputDirectory -Force | Out-Null
    Write-Host "Created output directory: $OutputDirectory" -ForegroundColor Green
}

Write-Host "Source Directory: $SourceDirectory" -ForegroundColor Cyan
Write-Host "Output Directory: $OutputDirectory" -ForegroundColor Cyan
Write-Host "Quality (CRF): $Quality" -ForegroundColor Cyan
Write-Host "Delete Original: $DeleteOriginal" -ForegroundColor Cyan
Write-Host "---" -ForegroundColor Gray

# Search for video files
$videoExtensions = @("*.mp4", "*.mkv")
$videoFiles = @()

foreach ($extension in $videoExtensions) {
    $files = Get-ChildItem -Path $SourceDirectory -Filter $extension -Recurse -File
    $videoFiles += $files
}

if ($videoFiles.Count -eq 0) {
    Write-Host "No .mp4 or .mkv files found in the specified directory." -ForegroundColor Yellow
    exit 0
}

Write-Host "Found $($videoFiles.Count) video file(s) to process:" -ForegroundColor Green
foreach ($file in $videoFiles) {
    Write-Host "  - $($file.FullName)" -ForegroundColor White
}
Write-Host "---" -ForegroundColor Gray

# Process each video file
$successCount = 0
$failureCount = 0
$totalOriginalSize = 0
$totalNewSize = 0

foreach ($videoFile in $videoFiles) {
    $relativePath = $videoFile.FullName.Substring($SourceDirectory.Length + 1)
    $outputFileName = [System.IO.Path]::ChangeExtension($relativePath, ".mp4")
    $outputFilePath = Join-Path $OutputDirectory $outputFileName
    
    # Create subdirectories if needed
    $outputDir = Split-Path $outputFilePath -Parent
    if (-not (Test-Path $outputDir)) {
        New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
    }
    
    # Skip if output file exists and overwrite is not enabled
    if ((Test-Path $outputFilePath) -and -not $OverwriteExisting) {
        Write-Host "Skipping (already exists): $($videoFile.Name)" -ForegroundColor Yellow
        continue
    }
    
    # Skip if input and output are the same file and it's already MP4
    if (($videoFile.Extension -eq ".mp4") -and ($videoFile.FullName -eq $outputFilePath)) {
        Write-Host "Skipping (same file): $($videoFile.Name)" -ForegroundColor Yellow
        continue
    }
    
    $originalSize = $videoFile.Length
    $totalOriginalSize += $originalSize
    
    # Convert the file
    $success = Convert-VideoFile -InputFile $videoFile.FullName -OutputFile $outputFilePath -CRF $Quality
    
    if ($success) {
        $successCount++
        $newSize = (Get-Item $outputFilePath).Length
        $totalNewSize += $newSize
        
        # Delete original file if requested and conversion was successful
        if ($DeleteOriginal -and ($videoFile.FullName -ne $outputFilePath)) {
            try {
                Remove-Item $videoFile.FullName -Force
                Write-Host "✓ Original file deleted: $($videoFile.Name)" -ForegroundColor Green
            }
            catch {
                Write-Host "✗ Failed to delete original file: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    }
    else {
        $failureCount++
    }
}

# Summary
Write-Host "=================================" -ForegroundColor Blue
Write-Host "Conversion Summary:" -ForegroundColor Blue
Write-Host "✓ Successful: $successCount" -ForegroundColor Green
Write-Host "✗ Failed: $failureCount" -ForegroundColor Red

if ($successCount -gt 0) {
    $totalCompressionRatio = [math]::Round((1 - ($totalNewSize / $totalOriginalSize)) * 100, 2)
    Write-Host "Total original size: $(Get-FileSize $totalOriginalSize)" -ForegroundColor Cyan
    Write-Host "Total new size: $(Get-FileSize $totalNewSize)" -ForegroundColor Cyan
    Write-Host "Total size reduction: $totalCompressionRatio%" -ForegroundColor Magenta
    Write-Host "Space saved: $(Get-FileSize ($totalOriginalSize - $totalNewSize))" -ForegroundColor Magenta
}

Write-Host "Script completed!" -ForegroundColor Blue
